<?php
/**
*	purpose:	Generic ORM mapper for DB records, internal sourced use only
* 	params:		all Public variables have to be set by the inheriting class
*	returns:	pError is used for class generated error messages
* 				pDBret is used for the DB return codes
* 	Author:		Boris Hristovski for the LSDB system
* 	Version:	0.2
*/

class cDbObject {
	
	var $DB;				// our database connection handle
	var $pError='';			// error messages
	var $pDBret='';			// return codes from DB
	var $dataTable='';		// database table name
	var $objName='';		// logical object name
	var $keyfield='';		// name of primary key field
	var $appkeyfield='';	// key field generated by class, if empty the insert does not try to save and re-fetch
	var $aDATA=array();		// the data constructor with the primary key
	
	function cDbObject(){
		// constructor ...
		$this->aDATA[$this->keyfield]=0;
		
	}
	function setDB(&$dbi){
		// tested OK
		$this->DB=$dbi;
	}
	
	function getbyID($object_id){
		// tested OK
		if (!is_numeric($object_id)) {
			$this->pError='No primary ID passed ....';
		}
		// retrieve data and put into associative array
		if ($object_id>0) {
			$rec=sql_query('select * from '.$this->dataTable.' WHERE '.$this->keyfield.'='.$object_id,$this->DB);
			$this->aDATA=sql_fetch_array($rec,$this->DB);
		}
	}

	function getbyKEY($keyval){
		// tested OK
		// retrieve data and put into associative array
		if (sizeof($this->appkeyfield)>1){
			if (strlen($keyval)>0) {
				$sSQL='select * from '.$this->dataTable.' WHERE '.$this->appkeyfield.'=\''.$keyval.'\'';
				$rec=sql_query($sSQL,$this->DB);
				$this->aDATA=sql_fetch_array($rec,$this->DB);
			}
		}else{$this->pError='No appkey defined';}
	}
	
	function returnXML(){
		// tested OK
		$OUT='<'.$this->objName.'>';
		foreach( $this->aDATA as $k=>$val ){
			if (!is_int($k)){$OUT=$OUT.'<'.$k.'>'.$val.'</'.$k.'>';}
		}
		return $OUT=$OUT.'</'.$this->objName.'>';
	}
	
	function returnCSV(){
		// tested OK
		$OUT='';
		foreach( $this->aDATA as $k=>$val ){
			if (is_int($k)){$OUT=$OUT.$val.';';}
		}
		$OUT=substr($OUT,0,strlen($OUT)-1);
		return $OUT;
	}
	
	function save(){
		// tested OK
		/*
		 * the aDATA array can be an autogenerated named array with 2 entries per value
		 * we have to remove the numeric ones and use the named key-values only
		 */
		if ($this->aDATA[$this->keyfield]!=0){
			// UPDATE
			$sSQL='UPDATE '.$this->dataTable.' SET ';
			foreach( $this->aDATA as $k=>$val ){
				if(!is_numeric($k)){
					$sSQL = $sSQL.$k.'=\''.$val.'\',';
				}
			}
			$sSQL=substr($sSQL,0,strlen($sSQL)-1);
			$sSQL = $sSQL.' WHERE '.$this->keyfield.'='.$this->aDATA[$this->keyfield];
		} else {
			// if exists than INSERT by using a private KEYVAL, else just INSERT
			if (sizeof($this->appkeyfield)>1){
				$this->aDATA[$this->appkeyfield]='k'.time();
			}
			$sSQL='INSERT INTO '.$this->dataTable;
			$FNAMES='';
			$VALUES='';
			foreach( $this->aDATA as $k=>$val ){
				if(!is_numeric($k)){
					$FNAMES=$FNAMES.$k.',';
					$VALUES=$VALUES.'\''.$val.'\',';
				}
			}
			$FNAMES=substr($FNAMES,0,strlen($FNAMES)-1);
			$VALUES=substr($VALUES,0,strlen($VALUES)-1);
			$sSQL=$sSQL.'('.$FNAMES.') VALUES('.$VALUES.')';
		}
		// EXECUTE ....
		#debug($sSQL);
		$p=sql_query($sSQL,$this->DB);
		$this->pDBret=$p;
		
		// try to obtain the generated PRIMARY ID by using our private appkeyfield
		// reload entire aDATA from DataBase
		if ($this->aDATA[$this->keyfield]==0){
			if (sizeof($this->appkeyfield)>1){$this->getbyKEY($this->aDATA[$this->appkeyfield]);}
		}
	}
	
	// 
	// *************** end generic functions *************** //
	// 
	
}
?>